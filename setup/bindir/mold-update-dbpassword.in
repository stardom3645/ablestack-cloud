#!/usr/bin/env bash

# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

echo " ### [START] Start Changing the DB Password ### "

LOGFILE=/tmp/mold-update-dbpassword.log
KEYENC_FILE="/etc/cloudstack/management/key.enc"
DB_FILE="/etc/cloudstack/management/db.properties"
jarfile='/usr/share/cloudstack-common/lib/cloudstack-utils.jar'
re1="[0-9]"
re2="[a-z]"
re3="[A-Z]"
re4="[~\!@#$%^&*()]"
keyboard="qwertyuiop asdfghjkl zxcvbnm 1234567890 poiuytrewq lkjhgfdsa mnbvcxz 0987654321"


function createkey()
{
  # Enter the password required when creating kek
  echo " ### Enter the required password when generating a key encryption key(KEK).(more than 4 characters) ### "

  while :
  do
    echo -n "Password : "
    read -s kek_pass
    echo " "

    echo -n "Password Check : "
    read -s kek_pass_check
    echo " "

    if [ "$kek_pass" != "$kek_pass_check" ] || [ -z $kek_pass ] || [ ${#kek_pass} -lt 4 ]
    then
      echo "[Alert] Please check your password again.(more than 4 characters)"
    else
      break
    fi
  done

  # Create kek
  rm -rf kek, key
  kek=$(openssl kdf -keylen 16 -kdfopt digest:SHA2-256 -kdfopt pass:$kek_pass -kdfopt salt:$(cat kek.salt) -kdfopt iter:100000 PBKDF2 | base64)

  # Generate audit log to determine whether KEK is successful
  if [[ $? == 0 ]]; then
      echo " ### [ KEK Creation Status : Success ] ### " | tee -a $LOGFILE
      echo $kek >> kek
  else
      echo " ### [ KEK Creation Status : Fail ] ### " | tee -a $LOGFILE
      exit 1
  fi

  # Generate key by decrypting key.enc
  openssl enc -d -aria-256-ctr -a -kfile kek -iter 100000 -in key.enc -out key

  # Generate audit log for successful decryption operation
  if [[ $? == 0 ]]; then
      echo " ### [ Decryption Operation Status(key.enc => key) : Success ] ### " | tee -a $LOGFILE
  else
      echo " ### [ Decryption Operation Status(key.enc => key) : Fail ] ### " | tee -a $LOGFILE
      exit 1
  fi

  # Change key execution permission
  chmod 777 key

  # Delete kek file, override kek to 0 and 1
  rm -rf kek
  kek=010101010101010101
  kek=100110101011010101
  kek=010010101001000110
  kek=111101011101101001
  kek=001001001111001110

}

check_if_svc_active() {
  svc_name=$1
  systemctl is-active $svc_name -q
  if [ $? -eq 0 ];then
    echo "service $svc_name is still active. Please stop it and retry." | tee -a ${LOGFILE}
    exit 1
  fi
}

if [ "$1" != "" ] && [ "$1" != "-h" ] && [ "$1" != "--help" ];then
  check_if_svc_active "cloudstack-management"
  check_if_svc_active "cloudstack-usage"
fi

# java -classpath /etc/cloudstack/management:/usr/share/cloudstack-management/lib/* \
#   com.cloud.utils.crypt.EncryptionSecretKeyChanger \
#   "$@" \
#   > >(tee -a ${LOGFILE}) 2> >(tee -a ${LOGFILE} >/dev/null)

cd /etc/cloudstack/management

if [ -e $KEYENC_FILE ]; then
	createkey
fi

echo " ### Please Enter a New DB Password ### "
while :
do
  echo -n "New Password : "
  read -s newpass
  echo " "

  echo -n "New Password Check : "
  read -s newpass_check
  echo " "

  #동일한 문자·숫자의 연속적인 반복입력 금지
  echo $newpass  | grep "\([0-9a-zA-Z~\!@#$%^&*()]\)\1"  > /dev/null
  re5=$?

  #키보드상의 연속된 문자 또는 숫자의 순차적 입력금지
  re6=0
  t_pass=$(echo "$newpass" | tr '[:upper:]' '[:lower:]')
  for ((i = 0 ; i <= ${#t_pass}-3 ; i++))
  do
    split_pass_str=$(echo ${t_pass:$i:4})
    for keyboard_str in $keyboard
    do
      if [[ "$keyboard_str" =~ $split_pass_str ]]; then
        re6=1
        break 2
      else
        re6=0
      fi
    done
  done

  #9자리 이상의 길이 확보  #숫자, 대문자(영문), 소문자(영문), 특수문자가 각 1개 이상 포함 # 사용자 계정(ID)과 동일한 패스워드 설정 금지
  if [[ "$newpass" =~ $re1 ]] && [[ "$newpass" =~ $re2 ]] && [[ "$newpass" =~ $re3 ]] && [[ "$newpass" =~ $re4 ]] && [[ $re5 -eq 1 ]] && [[ $re6 -eq 0 ]]  && [[ ${#newpass} -ge 9 ]] && [[ ${#newpass} -le 15 ]]; then
    echo " ### Enter the Current DB Password ### "
    echo -n "Current Password : "
    read -s rootdbpass
    echo " "

    mysql -uroot -p$rootdbpass cloud -e "select 1 from dual"
    res=$?
    if [ $res -eq 0 ] && [ "$newpass" != "$rootdbpass" ];then #직전 사용된 패스워드 재사용 금지
      echo " ### Mysql current password OK  ### " | tee -a $LOGFILE
      break
    else
      echo "[Invalid Password] Please check your new DB password again." | tee -a $LOGFILE
      exit 1
    fi
  else
    echo "[Invalid Password] Please check your new DB password again."
  fi
done

key=$(cat key)
curDbCloudEncPassword=$(sed '/^\#/d' $DB_FILE | grep 'db.cloud.password'  | tail -n 1 | cut -d "=" -f2- | sed 's/^[[:space:]]*//;s/[[:space:]]*$//'i | sed 's/^ENC(\(.*\))/\1/' | sed 's/\//\\\//g')
curDbUsageEncPassword=$(sed '/^\#/d' $DB_FILE | grep 'db.usage.password'  | tail -n 1 | cut -d "=" -f2- | sed 's/^[[:space:]]*//;s/[[:space:]]*$//'i | sed 's/^ENC(\(.*\))/\1/' | sed 's/\//\\\//g')
encVersion=$(sed '/^\#/d' $DB_FILE | grep 'db.cloud.encryptor.version'  | tail -n 1 | cut -d "=" -f2-)
# echo "curDbCloudEncPassword :: "$curDbCloudEncPassword
# echo "curDbUsageEncPassword :: "$curDbUsageEncPassword
# echo "encVersion :: "$encVersion
# echo "newpass :: "$newpass
# echo "key :: "$key

if [ ! $key == "" ]
then
  newDbCloudEncPassword=$(java -classpath $jarfile com.cloud.utils.crypt.EncryptionCLI -i $newpass -p $key $encVersion | sed 's/\//\\\//g')
  # echo "newDbCloudEncPassword :: "$newDbCloudEncPassword

  newDbUsageEncPassword=$(java -classpath $jarfile com.cloud.utils.crypt.EncryptionCLI -i $newpass -p $key $encVersion | sed 's/\//\\\//g')
  # echo "newDbUsageEncPassword :: "$newDbUsageEncPassword

  if [ ! $newDbCloudEncPassword ] || [ ! $newDbUsageEncPassword ]
  then
    echo " ### Failed to Encrypt DB Password  ### " | tee -a $LOGFILE
    exit 1
  else
    sed -i "s/$curDbCloudEncPassword/$newDbCloudEncPassword/g" $DB_FILE
    sed -i "s/$curDbUsageEncPassword/$newDbUsageEncPassword/g" $DB_FILE
    res=$?
    if [ $res -eq 0 ];then
      echo " ### DB properties root, cloud password change completed ### " | tee -a $LOGFILE
    else
      echo " ### DB properties root, cloud password change failed ### "| tee -a $LOGFILE
      exit 1
    fi
  fi
fi

mysql -uroot -p$rootdbpass -e "ALTER USER 'cloud'@'localhost' IDENTIFIED BY '$newpass'"
mysql -uroot -p$rootdbpass -e "ALTER USER 'root'@'localhost' IDENTIFIED BY '$newpass'"

res=$?
if [ $res -eq 0 ];then
   echo " ### Mysql root, cloud password change completed ### " | tee -a $LOGFILE
else
   echo " ### Mysql root, cloud password change failed ### "| tee -a $LOGFILE
   exit 1
fi

rm -rf key
key=010101010101010101
key=100110101011010101
key=010010101001000110
key=111101011101101001
key=001001001111001110

echo " ### [FINISH] DB Password Change Completed ### "

exit 0
